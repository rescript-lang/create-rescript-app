// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Node from "./bindings/Node.res.mjs";
import * as Nodefs from "node:fs";
import * as CraPaths from "./CraPaths.res.mjs";
import * as JsonUtils from "./JsonUtils.res.mjs";
import * as Templates from "./Templates.res.mjs";
import * as Nodepath from "node:path";
import * as ClackPrompts from "./bindings/ClackPrompts.res.mjs";
import * as Prompts from "@clack/prompts";
import * as RescriptVersions from "./RescriptVersions.res.mjs";

var packageNameRegExp = /^[a-z0-9-]+$/;

function validateProjectName(projectName) {
  if (projectName.trim().length === 0) {
    return "Project name must not be empty.";
  } else if (packageNameRegExp.test(projectName)) {
    if (Nodefs.existsSync(Nodepath.join(process.cwd(), projectName))) {
      return "The folder " + projectName + " already exist in the current directory.";
    } else {
      return ;
    }
  } else {
    return "Project name may only contain lower case letters, numbers and hyphens.";
  }
}

async function updatePackageJson(projectName) {
  return await JsonUtils.updateJsonFile("package.json", (function (json) {
                if (!Array.isArray(json) && (json === null || typeof json !== "object") && typeof json !== "number" && typeof json !== "string" && typeof json !== "boolean") {
                  return ;
                }
                if (!(typeof json === "object" && !Array.isArray(json))) {
                  return ;
                }
                json["name"] = projectName;
              }));
}

async function updateRescriptJson(projectName) {
  return await JsonUtils.updateJsonFile("rescript.json", (function (json) {
                if (!Array.isArray(json) && (json === null || typeof json !== "object") && typeof json !== "number" && typeof json !== "string" && typeof json !== "boolean") {
                  return ;
                }
                if (!(typeof json === "object" && !Array.isArray(json))) {
                  return ;
                }
                json["name"] = projectName;
              }));
}

function getTemplateOptions() {
  return Templates.templates.map(function (param) {
              return {
                      value: param.name,
                      label: param.displayName,
                      hint: param.shortDescription
                    };
            });
}

async function createNewProject() {
  Prompts.note("Create a new ReScript 11 project with modern defaults\n(\"Core\" standard library, JSX 4 automatic mode)", "New Project");
  var projectName = await ClackPrompts.resultOrRaise(Prompts.text({
            message: "What is the name of your new ReScript project?",
            placeholder: "my-rescript-app",
            initialValue: process.argv[2],
            validate: validateProjectName
          }));
  var templateName = await ClackPrompts.resultOrRaise(Prompts.select({
            message: "Select a template",
            options: getTemplateOptions()
          }));
  var versions = await RescriptVersions.promptVersions();
  var templatePath = CraPaths.getTemplatePath(templateName);
  var projectPath = Nodepath.join(process.cwd(), projectName);
  var s = Prompts.spinner();
  s.start("Creating project...");
  await Nodefs.promises.cp(templatePath, projectPath, {
        recursive: true
      });
  process.chdir(projectPath);
  await Nodefs.promises.rename("_gitignore", ".gitignore");
  await updatePackageJson(projectName);
  await updateRescriptJson(projectName);
  await RescriptVersions.installVersions(versions);
  await $$Node.Promisified.ChildProcess.exec("git init");
  s.stop("Project created.");
}

export {
  createNewProject ,
}
/* Node Not a pure module */
