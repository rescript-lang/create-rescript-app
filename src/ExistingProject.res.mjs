// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Nodefs from "node:fs";
import * as Nodeos from "node:os";
import * as CraPaths from "./CraPaths.res.mjs";
import * as JsonUtils from "./JsonUtils.res.mjs";
import * as Templates from "./Templates.res.mjs";
import * as Nodepath from "node:path";
import * as ClackPrompts from "./bindings/ClackPrompts.res.mjs";
import * as Prompts from "@clack/prompts";
import * as RescriptVersions from "./RescriptVersions.res.mjs";

async function updatePackageJson() {
  return await JsonUtils.updateJsonFile("package.json", (function (json) {
                if (!Array.isArray(json) && (json === null || typeof json !== "object") && typeof json !== "number" && typeof json !== "string" && typeof json !== "boolean") {
                  return ;
                }
                if (!(typeof json === "object" && !Array.isArray(json))) {
                  return ;
                }
                var match = json["scripts"];
                var scripts;
                var exit = 0;
                if (match !== undefined && !(!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean" || !(typeof match === "object" && !Array.isArray(match)))) {
                  scripts = match;
                } else {
                  exit = 1;
                }
                if (exit === 1) {
                  var scripts$1 = {};
                  json["scripts"] = scripts$1;
                  scripts = scripts$1;
                }
                scripts["res:dev"] = "rescript build -w";
              }));
}

async function updateRescriptJson(projectName, sourceDir) {
  return await JsonUtils.updateJsonFile("rescript.json", (function (json) {
                if (!Array.isArray(json) && (json === null || typeof json !== "object") && typeof json !== "number" && typeof json !== "string" && typeof json !== "boolean") {
                  return ;
                }
                if (!(typeof json === "object" && !Array.isArray(json))) {
                  return ;
                }
                json["name"] = projectName;
                var match = json["sources"];
                if (match === undefined) {
                  return ;
                }
                if (!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean") {
                  return ;
                }
                if (!(typeof match === "object" && !Array.isArray(match))) {
                  return ;
                }
                match["dir"] = sourceDir;
              }));
}

async function addToExistingProject(projectName) {
  var versions = await RescriptVersions.promptVersions();
  var sourceDir = await ClackPrompts.resultOrRaise(Prompts.text({
            message: "Where will you put your ReScript source files?",
            placeholder: "src",
            defaultValue: "src",
            initialValue: "src"
          }));
  var templatePath = CraPaths.getTemplatePath(Templates.basicTemplateName);
  var projectPath = process.cwd();
  var gitignorePath = Nodepath.join(projectPath, ".gitignore");
  var sourceDirPath = Nodepath.join(projectPath, sourceDir);
  var s = Prompts.spinner();
  s.start("Adding ReScript to your project...");
  await Nodefs.promises.copyFile(Nodepath.join(templatePath, "rescript.json"), Nodepath.join(projectPath, "rescript.json"));
  if (Nodefs.existsSync(gitignorePath)) {
    await Nodefs.promises.appendFile(gitignorePath, Nodeos.EOL + "/lib/" + Nodeos.EOL + ".bsb.lock" + Nodeos.EOL);
  } else {
    await Nodefs.promises.copyFile(Nodepath.join(templatePath, "_gitignore"), gitignorePath);
  }
  await updatePackageJson();
  await updateRescriptJson(projectName, sourceDir);
  if (!Nodefs.existsSync(sourceDirPath)) {
    await Nodefs.promises.mkdir(sourceDirPath);
  }
  await Nodefs.promises.copyFile(Nodepath.join(templatePath, "src", "Demo.res"), Nodepath.join(sourceDirPath, "Demo.res"));
  await RescriptVersions.installVersions(versions);
  s.stop("Added ReScript to your project.");
}

export {
  addToExistingProject ,
}
/* node:fs Not a pure module */
